import os
import requests
import base64
from PIL import Image, ImageDraw

# This script will create a new file called 'embedded_assets.py'
# containing all fonts and icons as Base64 strings.

STATIC_DIR = "static"
OUTPUT_FILE = "embedded_assets.py"

def download_file(url, path):
    """Downloads a file if it doesn't exist."""
    if os.path.exists(path):
        print(f"'{os.path.basename(path)}' already exists. Using local copy.")
        return
    try:
        print(f"Downloading '{os.path.basename(path)}'...")
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        with open(path, "wb") as f:
            f.write(response.content)
        print(f"SUCCESS: Saved '{os.path.basename(path)}'.")
    except requests.RequestException as e:
        print(f"FATAL ERROR: Could not download {os.path.basename(path)}. Error: {e}")
        exit(1)

def create_icon(path, creation_func):
    """Creates an icon file if it doesn't exist."""
    if os.path.exists(path):
        print(f"'{os.path.basename(path)}' already exists. Using local copy.")
        return
    try:
        print(f"Creating '{os.path.basename(path)}'...")
        creation_func(path)
        print(f"SUCCESS: Created '{os.path.basename(path)}'.")
    except Exception as e:
        print(f"FATAL ERROR creating icon {os.path.basename(path)}: {e}")
        exit(1)

def encode_file_to_base64(path):
    """Reads a file and returns its Base64 encoded string."""
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode('utf-8')

# --- Icon Creation Functions ---
def make_reddit_icon(path):
    img = Image.new('RGBA', (64, 64), (0,0,0,0)); draw = ImageDraw.Draw(img)
    draw.ellipse([(0,0), (63,63)], fill='#FF4500'); draw.ellipse([(22, 10), (42, 30)], fill='white')
    draw.ellipse([(12, 28), (22, 38)], fill='white'); draw.ellipse([(42, 28), (52, 38)], fill='white')
    draw.line([(40,10),(48,2)], fill='white', width=4); draw.ellipse([(46,0),(52,6)], fill='white')
    draw.ellipse([(26, 18), (30, 24)], fill='black'); draw.ellipse([(34, 18), (38, 24)], fill='black')
    img.save(path)

def make_upvote_icon(path):
    img = Image.new('RGBA', (32, 32), (0,0,0,0)); draw = ImageDraw.Draw(img)
    draw.polygon([(16, 4), (4, 18), (12, 18), (12, 28), (20, 28), (20, 18), (28, 18)], fill='#818384')
    img.save(path)

def make_comment_icon(path):
    img = Image.new('RGBA', (32, 32), (0,0,0,0)); draw = ImageDraw.Draw(img)
    draw.rounded_rectangle((2, 4, 30, 24), radius=6, fill='#818384')
    draw.polygon([(8, 24), (16, 30), (16, 24)], fill='#818384')
    img.save(path)

# --- Main Execution ---
if __name__ == "__main__":
    os.makedirs(STATIC_DIR, exist_ok=True)
    
    # 1. Define all required assets
    assets = {
        "fonts": {
            "Inter-Regular.ttf": "https://fonts.gstatic.com/s/inter/v13/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuOKfAZ9hjg.ttf",
            "Inter-SemiBold.ttf": "https://fonts.gstatic.com/s/inter/v13/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuOKfAZ9hGg.ttf"
        },
        "icons": {
            "reddit_icon.png": make_reddit_icon,
            "upvote_icon.png": make_upvote_icon,
            "comment_icon.png": make_comment_icon
        }
    }
    
    print("--- Preparing Local Assets ---")
    for filename, url in assets["fonts"].items():
        download_file(url, os.path.join(STATIC_DIR, filename))
    for filename, func in assets["icons"].items():
        create_icon(os.path.join(STATIC_DIR, filename), func)

    # 2. Encode all assets and prepare the output file content
    print("\n--- Generating Embedded Asset File ---")
    output_content = [
        "# This file is auto-generated by embed_assets.py. DO NOT EDIT MANUALLY.",
        "# It contains all necessary fonts and icons as Base64 strings.",
        "import base64",
        "import io\n"
    ]
    
    all_assets_b64 = {}
    for filename in assets["fonts"]:
        all_assets_b64[filename] = encode_file_to_base64(os.path.join(STATIC_DIR, filename))
    for filename in assets["icons"]:
        all_assets_b64[filename] = encode_file_to_base64(os.path.join(STATIC_DIR, filename))

    for name, b64_string in all_assets_b64.items():
        var_name = name.upper().replace('-', '_').replace('.', '_')
        output_content.append(f"{var_name}_B64 = '{b64_string}'")

    output_content.append("\n# Helper dictionary to access decoded assets as file-like objects")
    output_content.append("DECODED_ASSETS = {")
    for name in all_assets_b64:
        var_name = name.upper().replace('-', '_').replace('.', '_')
        output_content.append(f"    '{name}': io.BytesIO(base64.b64decode({var_name}_B64)),")
    output_content.append("}")

    # 3. Write the new python file
    with open(OUTPUT_FILE, "w") as f:
        f.write("\n".join(output_content))
        
    print(f"\nSUCCESS: Created '{OUTPUT_FILE}' with all assets embedded.")
    print("You should now commit this new file to your repository.")
